#!/command/with-contenv bash

source /assets/functions/00-container
prepare_service

PROCESS_NAME="flarum"
check_service_initialized init 20-php-fpm

### Sanity Test
sanity_db
sanity_var SITE_URL "Site URL"
db_ready mariadb

### Check to see if this is a new install
mysql -u"${DB_USER}" -p"${DB_PASS}" -P"${DB_PORT}" -h"${DB_HOST}" "${DB_NAME}" -e "SELECT * FROM "${DB_PREFIX}"migrations;" > /dev/null 2>&1
if [ $? -gt 0 ]; then
  	 print_warn "Starting a clean Flarum installation. This may take 1-10 minutes.."

     if [ ! -d "/data/assets" ]; then
        print_debug "Copying assets to /data"
        mkdir -p /data/assets
        cp -R /assets/install/assets/* /data/assets/
     fi

     if [ ! -d "/data/extensions" ]; then
        print_debug "Making extensions folder"
        mkdir -p /data/extensions
     fi

     if [ ! -d "/data/storage" ]; then
        print_debug "Copying storage to /data"
        cp -R /assets/install/storage /data
     fi

     rm -rf "${NGINX_WEBROOT}"/config.php
     install_config=$(mktemp)
     cat <<EOF > "${install_config}"
debug: ${APP_DEBUG,,}
baseUrl: ${SITE_URL}
databaseConfiguration:
  driver: mysql
  host: ${DB_HOST}
  database: ${DB_NAME}
  username: ${DB_USER}
  password: ${DB_PASS}
  prefix: ${DB_PREFIX}
  port: ${DB_PORT}
adminUser:
  username: ${ADMIN_USER}
  password: ${ADMIN_PASS}
  password_confirmation: ${ADMIN_PASS}
  email: ${ADMIN_EMAIL}
settings:
  forum_title: ${SITE_TITLE}
EOF
        silent sudo -u "${NGINX_USER}" php "${NGINX_WEBROOT}"/flarum install --file="{install_config}"
        rm -rf "${install_config}"
        echo "${FLARUM_VERSION} first installed on $(date)" > /data/.version
        #cp -R "${NGINX_WEBROOT}"/composer.json /data
        #rm -rf "${NGINX_WEBROOT}"/composer.json
        ln -s /data/composer.json "${NGINX_WEBROOT}"/composer.json
    else
        print_notice "Detected previous Flarum installation"
        ### Write Configuration File
cat <<EOF > "${NGINX_WEBROOT}"/config.php
<?php return array (
  'debug' => ${APP_DEBUG},
  'database' => array (
    'driver' => 'mysql',
    'host' => '${DB_HOST}',
    'database' => '${DB_NAME}',
    'username' => '${DB_USER}',
    'password' => '${DB_PASS}',
    'port' => '${DB_PORT}',
    'charset' => 'utf8mb4',
    'collation' => 'utf8mb4_unicode_ci',
    'prefix' => '${DB_PREFIX}',
    'strict' => false,
  ),
  'url' => '${SITE_URL}',
  'paths' => array (
    'api' => '${API_PATH}',
    'admin' => '${ADMIN_PATH}',
  ),
);
EOF
     ### Upgrade Check
    if [ "${FLARUM_VERSION}" != "$(head -n 1 /data/.version | awk '{print $1}')" ]; then
        print_warn "Detected New Version from original installation, attempting automatic upgrade.. This may take a while.."
        silent sudo -u "${NGINX_USER}" php "${NGINX_WEBROOT}"/flarum migrate
        silent sudo -u "${NGINX_USER}" php "${NGINX_WEBROOT}"/flarum cache:clear
        echo "${FLARUM_VERSION} upgraded on $(date)" | cat - /data/.version > /tmp/.version && mv /tmp/.version /data/.version
        #cp -R "${NGINX_WEBROOT}"/composer.json /data/composer.json
        #ln -sf /data/composer.json "${NGINX_WEBROOT}"/composer.json
    else
        #rm -rf "${NGINX_WEBROOT}"/composer.json
        #ln -sf /data/composer.json "${NGINX_WEBROOT}"/composer.json
        :
    fi

     ### Extensions Check (Install / Update if available)
    silent sudo -u "${NGINX_USER}" php "${NGINX_WEBROOT}"/flarum cache:clear
    mkdir -p "${NGINX_WEBROOT}"/extensions/.cache
    if [ -f "${NGINX_WEBROOT}"/extensions/list ]; then
        print_info "Installing extensions.. This may take a while to get prepared"
        cd "${NGINX_WEBROOT}"
        silent sudo -u "${NGINX_USER}" composer outdated > /tmp/composer-updates
        while read extension; do
            if [ $(cat "${NGINX_WEBROOT}"/composer.json | grep "${extension}" | awk '{print $1}') ]; then
                print_notice "Extensions: Found '${extension}' however it is already installed..."
                if [[ $(cat /tmp/composer-updates | grep "${extension}" | awk '{print $1}') ]]; then
                    if [ "$(cat /tmp/composer-updates | grep "${extension}" | awk '{print $2}')" != "$(cat /tmp/composer-updates | grep "${extension}" | awk '{print $4}')" ]; then
                        if var_false "${EXTENSIONS_AUTO_UPDATE}" ; then
                            print_warn "Extensions: Auto Updating of Extensions Disabled"
                            print_warn "Extensions: Newer Version of '${extension}' found - Please update manually"
                        else
                            print_notice "Extensions: Newer version of '${extension}' found. Upgrading.."
                            silent sudo -u "${NGINX_USER}" composer update "${extension}"
                            silent sudo -u "${NGINX_USER}" php "${NGINX_WEBROOT}"/flarum migrate
                        fi
                    fi
                fi
            else
                print_notice "Extensions: Installing '${extension}'"
                silent composer require "${extension}"
            fi
        done < "${NGINX_WEBROOT}"/extensions/list
        rm -rf /tmp/composer-updates
        print_notice "Finished installing extensions"
    fi
fi

silent php "${NGINX_WEBROOT}"/flarum cache:clear

### Custom File Support
if [ -d /assets/custom ] ; then
    print_warn "Custom Files Found, Copying over top of Master"
    cp -R /assets/custom/* "${NGINX_WEBROOT}"
    chown -R "${NGINX_USER}":"${NGINX_GROUP}" "${NGINX_WEBROOT}"
fi

chown -R "${NGINX_USER}":"${NGINX_GROUP}" /data
chown -R "${NGINX_USER}":"${NGINX_GROUP}" "${NGINX_WEBROOT}"

print_info "Container Initialized - Now starting Web Services - Visit '${SITE_URL}' to proceed.."

liftoff